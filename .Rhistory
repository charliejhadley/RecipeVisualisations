ui = fluidPage(
tags$style(type='text/css', ".selectize-input { padding: 2px; min-height: 0; width: 800} .selectize-dropdown { line-height: 10px; }"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(projects.df)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#dataset + .selectize-control{ width: 1000px; height: 40px; }"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(projects.df)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 1000px; height: 40px; }"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(projects.df)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px; height: 40px; }"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(projects.df)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px}"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(projects.df)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px}"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = names(projects.df), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(
projects.df[, input$show_vars, drop = FALSE]
)
}
)
names(projects.df)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px}"),
selectInput('show_vars', 'Columns to show:',
names(projects.df), selected = c("Project.Short.Name","Project.Start.Date",
"Project.Summary"), multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(
projects.df[, input$show_vars, drop = FALSE]
)
}
)
projects.df[1:(ncol(projects.df)-1),]
names(project.df)[1:2]
names(projects.df)[1:2]
names(projects.df)[1:(nrow(projects.df)-1)]
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px}"),
selectInput('show_vars', 'Columns to show:',
names(projects.df)[1:(nrow(projects.df)-1)], selected = c("Project.Short.Name","Project.Start.Date",
"Project.End.Date","Project.Summary"),
multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(
projects.df[, input$show_vars, drop = FALSE]
)
}
)
shinyApp(
ui = fluidPage(
tags$style(type="text/css", "select#show_vars + .selectize-control{ width: 800px}"),
selectInput('show_vars', 'Columns to show:',
names(projects.df)[1:(ncol(projects.df)-1)], selected = c("Project.Short.Name","Project.Start.Date",
"Project.End.Date","Project.Summary"),
multiple = TRUE),
fluidRow(
column(12,
dataTableOutput('table')
)
)
),
server = function(input, output) {
output$table <- renderDataTable(
projects.df[, input$show_vars, drop = FALSE]
)
}
)
projects.sheet <-
gs_key("1I6Z94prfJrmSSmD_mwqazkp8Qx8AUmmsp9hAW6bF8yQ",
visibility = "public")
projects.df <- gs_read(projects.sheet, ws = "Approved-Data")
projects.df$Project.Start.Date
library(lubridate)
mdy(projects.df$Project.Start.Date)
projects.df$Project.Start.Date
ymd(projects.df$Project.Start.Date)
projects.df$Project.Start.Date
ymd <- ymd(projects.df$Project.Start.Date)
ymd <- ymd(projects.df$Project.Start.Date)
year <- ymd(projects.df$Project.Start.Date)
ymd(projects.df$Project.Start.Date)
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
foo <- ymd
foo
projects.df$Project.Start.Date
str(foo)
force_tz(foo,tmzone="GMT")
force_tz(foo, tzone = "GMT")
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")
projects.df$Project.Start.Date <- {
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
str(projects.df)
projects.df$Project.Start.Date <- {
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
projects.df$Project.End.Date <- {
year <- ymd(projects.df$Project.End.Date)
mdy <- mdy(projects.df$Project.End.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
str(projects.df)
projects.sheet <-
gs_key("1I6Z94prfJrmSSmD_mwqazkp8Qx8AUmmsp9hAW6bF8yQ",
visibility = "public")
projects.df <- gs_read(projects.sheet, ws = "Approved-Data")
projects.df$Project.Start.Date
library(lubridate)
projects.df$Project.Start.Date <- {
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
projects.df$Project.End.Date <- {
year <- ymd(projects.df$Project.End.Date)
mdy <- mdy(projects.df$Project.End.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
str(projects.df)
projects.df$Project.Start.Date <- {
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
year <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
projects.sheet <-
gs_key("1I6Z94prfJrmSSmD_mwqazkp8Qx8AUmmsp9hAW6bF8yQ",
visibility = "public")
projects.df <- gs_read(projects.sheet, ws = "Approved-Data")
projects.df$Project.Start.Date
library(lubridate)
projects.df$Project.Start.Date <- {
ymd <- ymd(projects.df$Project.Start.Date)
mdy <- mdy(projects.df$Project.Start.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
projects.df$Project.End.Date <- {
ymd <- ymd(projects.df$Project.End.Date)
mdy <- mdy(projects.df$Project.End.Date)
ymd[is.na(ymd)] <- mdy[is.na(ymd)]
force_tz(ymd, tzone = "GMT")}
str(projects.df)
commsplanMultiDay.sheet <-
gs_key("1ZWxJhJM9p6UaoQnBOHUsuyfht40OaEw4qKybVdFtjTc",
visibility = "public")
commsplanMultiDay.df <<- gs_read(commsplanMultiDay.sheet)
commsplanMultiDay.df$Action <<-
as.factor(commsplanMultiDay.df$Action)
# commsplanMultiDay.df$Start.Date <<-
#   as.POSIXct(commsplanMultiDay.df$Start.Date)
# commsplanMultiDay.df$End.Date <<-
#   as.POSIXct(commsplanMultiDay.df$End.Date)
ymd <- ymd(commsplanMultiDay.df$Start.Date)
ymd
library(treemap)
library(treemap)
treemap(
projects.df,
index = "Project.Short.Name",
vSize = "Budget.Requested",
vColor = "Budget.Requested",
type = "value",
title = "", position.legend = "none"
)
nchar(r[a_,b_]:=StringRepeat[a,Abs@b]c=' $ ';t='---';m='~~~';f1[n_]:=If[n>0,r[c,n]~~'\n','']~~r[t,n]~~'\n'~~r[m,n]~~'\n'~~r[t,n]f1[0]:='Congratulations on your new baby! :D')
nchar("r[a_,b_]:=StringRepeat[a,Abs@b]c=' $ ';t='---';m='~~~';f1[n_]:=If[n>0,r[c,n]~~'\n','']~~r[t,n]~~'\n'~~r[m,n]~~'\n'~~r[t,n]f1[0]:='Congratulations on your new baby! :D')
nchar("r[a_,b_]:=StringRepeat[a,Abs@b]c=' $ ';t='---';m='~~~';f1[n_]:=If[n>0,r[c,n]~~'\n','']~~r[t,n]~~'\n'~~r[m,n]~~'\n'~~r[t,n]f1[0]:='Congratulations on your new baby! :D'")
nchar("r[a_,b_]:=StringRepeat[a,Abs@b]c=' $ ';t='---';m='~~~';f1[n_]:=If[n>0,r[c,n]~~'\n','']~~r[t,n]~~'\n'~~r[m,n]~~'\n'~~r[t,n]f1[0]:='Congratulations on your new baby! :D'")
nchar("r[a_,b_]:=StringRepeat[a,Abs@b]c=' $ ';t='---';m='~~~';f[n_]:=If[n>0,r[c,n]~~'\n','']~~r[t,n]~~'\n'~~r[m,n]~~'\n'~~r[t,n];f[0]:='Congratulations on your new baby! :D'")
vec <- vector()
1 -> vec[1]
c(1,1) -> vec[2]
23 -> vec[2]
vec
lis <- list()
c(1,1) -> list[1]
list[1] <- c(1,1)
list
c(1,1) -> lis[1]
lis[1] <- c(1,1)
lis
lis <- list()
lis
lis[1] <- c(1,1)
lis
lis <- list()
lis[1] <- list(1,1)
lis
lis <- list()
lis[1] <- 1
lis
lis[2] <- "foo"
lis
source('~/.active-rstudio-document', echo=TRUE)
library(shiny)
suppressWarnings(library(data.table))
suppressWarnings(library(beanplot))
## note assistance from http://stackoverflow.com/q/30016817/1659890
recipesImport <- read.table("data/recipes.csv", sep = ",", as.is = TRUE, fill = TRUE, col.names = paste0("V",1:33), na.strings = "")
recipesImport <- data.table(recipesImport)
## function finds length of recipes by finding the number of elements that are not NA
notNAf <- function(data) sum(! is.na(data))-1
## The data structure for the wordcloud:
allrecipeLengths <- apply(recipesImport,1,notNAf);
shinyApp(
ui = navbarPage("Comparing recipe lengths",
tabPanel("Histogram",
sidebarLayout(
sidebarPanel(
selectInput("selection", "Choose a cuisine:",
choices = list(
"African recipes" = "African recipes",
"Eastern Asian recipes" = "Eastern Asian recipes",
"Eastern European recipes" = "Eastern European recipes",
"Latin American recipes" = "Latin American recipes",
"Middle Eastern recipes" = "Middle Eastern recipes",
"North American recipes" = "North American recipes",
"Northern European recipes" = "Northern European recipes",
"South Asian recipes" = "South Asian recipes",
"South East Asian recipes" = "South East Asian recipes",
"Southern European recipes" = "Southern European recipes",
"Western Euorpean recipes" = "Western Euorpean recipes"
)),
hr(),
sliderInput("bins",
"Width of bins",
min = 1,  max = 5, value = 2)
),
mainPanel(
plotOutput("comparativeHist")
)
)
),
tabPanel("Beanplot",
sidebarLayout(
sidebarPanel(
checkboxInput("beanAllAvg", label = "Show overall average", value = TRUE),
checkboxInput("beanOutline", label = "Show bean outline", value = TRUE),
checkboxInput("beanAvg", label = "Show per bean average")
),
mainPanel(
plotOutput("beanVis")
))
)
),
server = function(input, output){
specificCuisine <- reactive({
switch(input$selection,
"African recipes" = unlist(apply(recipesImport[V1=="African"],1,notNAf)),
"Eastern Asian recipes" = unlist(apply(recipesImport[V1=="EastAsian"],1,notNAf)),
"Eastern European recipes" = unlist(apply(recipesImport[V1=="EasternEuropean"],1,notNAf)),
"Latin American recipes" = unlist(apply(recipesImport[V1=="LatinAmerican"],1,notNAf)),
"Middle Eastern recipes" = unlist(apply(recipesImport[V1=="MiddleEastern"],1,notNAf)),
"North American recipes" = unlist(apply(recipesImport[V1=="NorthAmerican"],1,notNAf)),
"Northern European recipes" = unlist(apply(recipesImport[V1=="NorthernEuropean"],1,notNAf)),
"South Asian recipes" = unlist(apply(recipesImport[V1=="SouthAsian"],1,notNAf)),
"South East Asian recipes" = unlist(apply(recipesImport[V1=="SoutheastAsian"],1,notNAf)),
"Southern European recipes" = unlist(apply(recipesImport[V1=="SouthernEuropean"],1,notNAf)),
"Western Euorpean recipes" = unlist(apply(recipesImport[V1=="WesternEuropean"],1,notNAf))
)
})
output$comparativeHist <- renderPlot({
hist(allrecipeLengths,
freq = FALSE, col = "red", xlab = "Number of ingredients",
breaks = seq(0,35,by=input$bins), main = "Distribution of ingredients per recipe")
hist(specificCuisine(), freq = FALSE, xlab = "Number of ingredients", breaks = seq(0,35,by=input$bins), add=T,col=rgb(0, 1, 0, 0.5))
legend("topright",c("All recipes",input$selection), fill = c("red","green"))
})
options <- reactive({
c(
as.numeric(ifelse(input$beanAllAvg,1,0)),
as.numeric(ifelse(input$beanOutline,1,0)),
as.numeric(ifelse(input$beanAvg,1,0)),
0
)
})
output$beanVis <- renderPlot({
par(mar = c(10,4,4,2)+0.1)
beanplot(unlist(apply(recipesImport[V1=="African"],1,notNAf)),
unlist(apply(recipesImport[V1=="EastAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="EasternEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="LatinAmerican"],1,notNAf)),
unlist(apply(recipesImport[V1=="MiddleEastern"],1,notNAf)),
unlist(apply(recipesImport[V1=="NorthAmerican"],1,notNAf)),
unlist(apply(recipesImport[V1=="NorthernEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="SouthAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="SoutheastAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="SouthernEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="WesternEuropean"],1,notNAf)),
main="Beanplot of ingredients per cuisine",
## colours: bean area, border, inner lines, outer lines
col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",
## bean average, smooth bean, all avg (mean)
what = options(),
ylab = "Ingredients per recipe",
names = c("African","East Asian", "Eastern European","Latin American","Middle Eastern",
"North American","Northern European", "South Asian", "South East Asian", "SoutherEEuropean", "Western European"),
las = 2,
## handle clipped labels
mar = c(10,4,4,2)
)
})
},
options = list(height = 500, width = "100%")
)
setwd("~/Github/RecipeVisualisations")
suppressWarnings(library(data.table))
suppressWarnings(library(beanplot))
## note assistance from http://stackoverflow.com/q/30016817/1659890
recipesImport <- read.table("data/recipes.csv", sep = ",", as.is = TRUE, fill = TRUE, col.names = paste0("V",1:33), na.strings = "")
recipesImport <- data.table(recipesImport)
## function finds length of recipes by finding the number of elements that are not NA
notNAf <- function(data) sum(! is.na(data))-1
## The data structure for the wordcloud:
allrecipeLengths <- apply(recipesImport,1,notNAf);
shinyApp(
ui = navbarPage("Comparing recipe lengths",
tabPanel("Histogram",
sidebarLayout(
sidebarPanel(
selectInput("selection", "Choose a cuisine:",
choices = list(
"African recipes" = "African recipes",
"Eastern Asian recipes" = "Eastern Asian recipes",
"Eastern European recipes" = "Eastern European recipes",
"Latin American recipes" = "Latin American recipes",
"Middle Eastern recipes" = "Middle Eastern recipes",
"North American recipes" = "North American recipes",
"Northern European recipes" = "Northern European recipes",
"South Asian recipes" = "South Asian recipes",
"South East Asian recipes" = "South East Asian recipes",
"Southern European recipes" = "Southern European recipes",
"Western Euorpean recipes" = "Western Euorpean recipes"
)),
hr(),
sliderInput("bins",
"Width of bins",
min = 1,  max = 5, value = 2)
),
mainPanel(
plotOutput("comparativeHist")
)
)
),
tabPanel("Beanplot",
sidebarLayout(
sidebarPanel(
checkboxInput("beanAllAvg", label = "Show overall average", value = TRUE),
checkboxInput("beanOutline", label = "Show bean outline", value = TRUE),
checkboxInput("beanAvg", label = "Show per bean average")
),
mainPanel(
plotOutput("beanVis")
))
)
),
server = function(input, output){
specificCuisine <- reactive({
switch(input$selection,
"African recipes" = unlist(apply(recipesImport[V1=="African"],1,notNAf)),
"Eastern Asian recipes" = unlist(apply(recipesImport[V1=="EastAsian"],1,notNAf)),
"Eastern European recipes" = unlist(apply(recipesImport[V1=="EasternEuropean"],1,notNAf)),
"Latin American recipes" = unlist(apply(recipesImport[V1=="LatinAmerican"],1,notNAf)),
"Middle Eastern recipes" = unlist(apply(recipesImport[V1=="MiddleEastern"],1,notNAf)),
"North American recipes" = unlist(apply(recipesImport[V1=="NorthAmerican"],1,notNAf)),
"Northern European recipes" = unlist(apply(recipesImport[V1=="NorthernEuropean"],1,notNAf)),
"South Asian recipes" = unlist(apply(recipesImport[V1=="SouthAsian"],1,notNAf)),
"South East Asian recipes" = unlist(apply(recipesImport[V1=="SoutheastAsian"],1,notNAf)),
"Southern European recipes" = unlist(apply(recipesImport[V1=="SouthernEuropean"],1,notNAf)),
"Western Euorpean recipes" = unlist(apply(recipesImport[V1=="WesternEuropean"],1,notNAf))
)
})
output$comparativeHist <- renderPlot({
hist(allrecipeLengths,
freq = FALSE, col = "red", xlab = "Number of ingredients",
breaks = seq(0,35,by=input$bins), main = "Distribution of ingredients per recipe")
hist(specificCuisine(), freq = FALSE, xlab = "Number of ingredients", breaks = seq(0,35,by=input$bins), add=T,col=rgb(0, 1, 0, 0.5))
legend("topright",c("All recipes",input$selection), fill = c("red","green"))
})
options <- reactive({
c(
as.numeric(ifelse(input$beanAllAvg,1,0)),
as.numeric(ifelse(input$beanOutline,1,0)),
as.numeric(ifelse(input$beanAvg,1,0)),
0
)
})
output$beanVis <- renderPlot({
par(mar = c(10,4,4,2)+0.1)
beanplot(unlist(apply(recipesImport[V1=="African"],1,notNAf)),
unlist(apply(recipesImport[V1=="EastAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="EasternEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="LatinAmerican"],1,notNAf)),
unlist(apply(recipesImport[V1=="MiddleEastern"],1,notNAf)),
unlist(apply(recipesImport[V1=="NorthAmerican"],1,notNAf)),
unlist(apply(recipesImport[V1=="NorthernEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="SouthAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="SoutheastAsian"],1,notNAf)),
unlist(apply(recipesImport[V1=="SouthernEuropean"],1,notNAf)),
unlist(apply(recipesImport[V1=="WesternEuropean"],1,notNAf)),
main="Beanplot of ingredients per cuisine",
## colours: bean area, border, inner lines, outer lines
col = c("#CAB2D6", "#33A02C", "#B2DF8A"), border = "#CAB2D6",
## bean average, smooth bean, all avg (mean)
what = options(),
ylab = "Ingredients per recipe",
names = c("African","East Asian", "Eastern European","Latin American","Middle Eastern",
"North American","Northern European", "South Asian", "South East Asian", "SoutherEEuropean", "Western European"),
las = 2,
## handle clipped labels
mar = c(10,4,4,2)
)
})
},
options = list(height = 500, width = "100%")
)
install.packages("beanplot")
